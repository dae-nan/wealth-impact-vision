
import React from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { formatCurrencyCompact } from '@/utils/formatters';

interface AssetClassMatrixTableProps {
  scenarioImpacts: Array<{
    id: string;
    name: string;
    impact: any | null | undefined;
  }>;
  allAssetClasses: Set<string>;
  individualName: string;
}

export const AssetClassMatrixTable: React.FC<AssetClassMatrixTableProps> = ({
  scenarioImpacts,
  allAssetClasses,
  individualName
}) => {
  // Convert Set to Array for easier manipulation
  const assetClassArray = Array.from(allAssetClasses);

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle>Asset Class Impact Matrix</CardTitle>
        <CardDescription>
          Compare how different scenarios affect each asset class in {individualName}'s portfolio
        </CardDescription>
      </CardHeader>
      <CardContent className="overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Scenario</TableHead>
              {assetClassArray.map(assetClass => (
                <TableHead key={assetClass}>{assetClass}</TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {scenarioImpacts.map(scenario => (
              <TableRow key={scenario.id}>
                <TableCell className="font-medium">{scenario.name}</TableCell>
                {assetClassArray.map(assetClass => {
                  const impact = scenario.impact?.assetClassImpacts?.[assetClass];
                  if (!impact) return <TableCell key={assetClass}>—</TableCell>;
                  
                  const isPositive = impact.percentageChange >= 0;
                  
                  return (
                    <TableCell key={assetClass}>
                      <div className="text-sm">
                        <div>{formatCurrencyCompact(impact.originalValue)} →</div>
                        <div>{formatCurrencyCompact(impact.impactedValue)}</div>
                        <div className={isPositive ? 'text-green-500' : 'text-red-500'}>
                          {isPositive ? '+' : ''}{impact.percentageChange.toFixed(2)}%
                        </div>
                      </div>
                    </TableCell>
                  );
                })}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
};
