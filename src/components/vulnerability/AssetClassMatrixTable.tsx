
import React from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { formatCurrencyCompact } from '@/utils/formatters';
import { TrendingDown, TrendingUp } from 'lucide-react';

interface AssetClassMatrixTableProps {
  scenarioImpacts: Array<{
    id: string;
    name: string;
    impact: any | null | undefined;
  }>;
  allAssetClasses: Set<string>;
  individualName: string;
}

export const AssetClassMatrixTable: React.FC<AssetClassMatrixTableProps> = ({
  scenarioImpacts,
  allAssetClasses,
  individualName
}) => {
  // Convert Set to Array for easier manipulation
  const assetClassArray = Array.from(allAssetClasses);

  // Function to determine which cells contribute most to vulnerability
  const getHighContributionCells = (impacts: Record<string, any>) => {
    if (!impacts) return [];
    
    // Get all asset class impacts and sort by absolute value of impact
    const sortedImpacts = Object.entries(impacts)
      .map(([assetClass, impact]) => ({
        assetClass,
        absoluteImpact: Math.abs((impact as any).absoluteChange),
        isNegative: (impact as any).percentageChange < 0
      }))
      .sort((a, b) => b.absoluteImpact - a.absoluteImpact);
    
    // Return top 2 asset classes with negative impact
    return sortedImpacts
      .filter(impact => impact.isNegative)
      .slice(0, 2)
      .map(impact => impact.assetClass);
  };

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Scenario</TableHead>
          <TableHead>Total Impact</TableHead>
          {assetClassArray.map(assetClass => (
            <TableHead key={assetClass}>{assetClass}</TableHead>
          ))}
        </TableRow>
      </TableHeader>
      <TableBody>
        {scenarioImpacts.map(scenario => {
          const highContributionCells = getHighContributionCells(scenario.impact?.assetClassImpacts);
          
          return (
            <TableRow key={scenario.id}>
              <TableCell className="font-medium">{scenario.name}</TableCell>
              
              {/* Total Impact Column */}
              <TableCell>
                {scenario.impact ? (
                  <div className="flex flex-col items-start">
                    <div className="flex items-center gap-1">
                      <span className={scenario.impact.percentageChange >= 0 ? 'text-green-500' : 'text-red-500'}>
                        {scenario.impact.percentageChange >= 0 ? '+' : ''}{scenario.impact.percentageChange.toFixed(2)}%
                      </span>
                      {scenario.impact.percentageChange >= 0 ? 
                        <TrendingUp className="h-4 w-4 text-green-500" /> : 
                        <TrendingDown className="h-4 w-4 text-red-500" />
                      }
                    </div>
                    <div className="text-xs text-muted-foreground">
                      {formatCurrencyCompact(scenario.impact.absoluteChange)}
                    </div>
                  </div>
                ) : (
                  <div>—</div>
                )}
              </TableCell>
              
              {/* Asset Class Cells */}
              {assetClassArray.map(assetClass => {
                const impact = scenario.impact?.assetClassImpacts?.[assetClass];
                if (!impact) return <TableCell key={assetClass}>—</TableCell>;
                
                const isPositive = impact.percentageChange >= 0;
                const isHighContribution = highContributionCells.includes(assetClass);
                
                return (
                  <TableCell 
                    key={assetClass}
                    className={isHighContribution ? 'bg-red-50 dark:bg-red-950/30' : ''}
                  >
                    <div className="flex flex-col items-start">
                      <div className="flex items-center gap-1">
                        <span className={isPositive ? 'text-green-500' : 'text-red-500'}>
                          {isPositive ? '+' : ''}{impact.percentageChange.toFixed(2)}%
                        </span>
                        {isPositive ? 
                          <TrendingUp className="h-4 w-4 text-green-500" /> : 
                          <TrendingDown className="h-4 w-4 text-red-500" />
                        }
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {formatCurrencyCompact(impact.absoluteChange)}
                      </div>
                    </div>
                  </TableCell>
                );
              })}
            </TableRow>
          );
        })}
      </TableBody>
    </Table>
  );
};
