
import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { usePortfolioStore } from '@/store/portfolioStore';
import { SAMPLE_VULNERABILITY_SCORES } from '@/utils/sampleVulnerabilityData';
import { getRiskLevel } from '@/utils/sampleVulnerabilityData';
import { Table, TableHeader, TableBody, TableHead, TableRow, TableCell } from '@/components/ui/table';

export const VulnerabilityRankings = () => {
  const { holdingsData, scenarios, calculateImpactForScenario } = usePortfolioStore();
  
  if (!holdingsData) {
    return null;
  }
  
  // Get all individuals for columns
  const allIndividuals = [
    ...Object.keys(SAMPLE_VULNERABILITY_SCORES),
    holdingsData.individualName
  ].filter((value, index, self) => self.indexOf(value) === index);
  
  // Prepare data for each scenario
  const scenarioScores = scenarios.map(scenario => {
    const scores: Record<string, number> = {};
    
    // Add scores from sample data
    Object.entries(SAMPLE_VULNERABILITY_SCORES).forEach(([individual, individualScores]) => {
      if (individualScores[scenario.id] !== undefined) {
        scores[individual] = individualScores[scenario.id];
      }
    });
    
    // Add current portfolio score
    const impact = calculateImpactForScenario(scenario.id);
    if (impact?.vulnerabilityScore !== undefined) {
      scores[holdingsData.individualName] = impact.vulnerabilityScore;
    }
    
    return {
      id: scenario.id,
      name: scenario.name,
      scores
    };
  });
  
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Rankings Comparison</CardTitle>
          <CardDescription>
            Compare {holdingsData.individualName}'s vulnerability against other high-net-worth individuals
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table className="border">
            <TableHeader>
              <TableRow>
                <TableHead className="w-[180px]">Scenario</TableHead>
                {allIndividuals.map(individual => (
                  <TableHead key={individual}>
                    {individual}
                    {holdingsData.individualName === individual && (
                      <span className="ml-2 text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full">
                        Current
                      </span>
                    )}
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {scenarioScores.map(scenario => (
                <TableRow key={scenario.id}>
                  <TableCell className="font-medium">{scenario.name}</TableCell>
                  {allIndividuals.map(individual => {
                    const score = scenario.scores[individual];
                    if (score === undefined) {
                      return <TableCell key={individual}>â€”</TableCell>;
                    }
                    
                    const { text: riskText, colorClass } = getRiskLevel(score);
                    
                    return (
                      <TableCell key={individual} className="px-4 py-2">
                        <div className="flex items-center mb-1">
                          <div 
                            className={`h-2 rounded-full w-16 ${colorClass}`}
                          >
                            <div 
                              className="h-full rounded-full bg-muted" 
                              style={{ width: `${100 - Math.min(score / 0.5, 100)}%` }}
                            />
                          </div>
                          <span className="ml-2 text-sm">
                            {riskText}
                          </span>
                        </div>
                        <div className="text-sm text-muted-foreground">
                          Score: {score.toFixed(1)}
                        </div>
                      </TableCell>
                    );
                  })}
                </TableRow>
              ))}
            </TableBody>
          </Table>
          <p className="text-xs text-muted-foreground italic mt-4">
            Vulnerability score is calculated based on portfolio volatility and downside exposure.
            Higher scores indicate greater vulnerability to the selected scenario.
          </p>
        </CardContent>
      </Card>
    </div>
  );
};
