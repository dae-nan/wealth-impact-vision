
import React from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { TrendingDown, TrendingUp } from 'lucide-react';
import { getRiskLevel } from '@/utils/sampleVulnerabilityData';
import { PortfolioImpact } from '@/store/types';
import { Scenario } from '@/store/types';

interface ScenarioImpactTableProps {
  scenarioImpacts: Array<{
    id: string;
    name: string;
    impact: PortfolioImpact | null | undefined;
    vulnerabilityScore: number;
  }>;
  expandedScenario: string | null;
  handleExpandScenario: (scenarioId: string) => void;
}

export const ScenarioImpactTable: React.FC<ScenarioImpactTableProps> = ({
  scenarioImpacts,
  expandedScenario,
  handleExpandScenario,
}) => {
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      maximumFractionDigits: 0,
    }).format(value);
  };
  
  if (!scenarioImpacts || scenarioImpacts.length === 0) {
    return <p className="text-center py-4 text-muted-foreground">No scenario data available</p>;
  }

  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Scenario</TableHead>
          <TableHead>Original Value</TableHead>
          <TableHead>Projected Value</TableHead>
          <TableHead>Net Impact</TableHead>
          <TableHead>Vulnerability Score</TableHead>
          <TableHead>Risk Level</TableHead>
          <TableHead>Details</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {scenarioImpacts.map((scenario) => {
          const impact = scenario.impact;
          if (!impact) return null;
          
          const isPositive = impact.percentageChange >= 0;
          const { text: riskText, colorClass } = getRiskLevel(scenario.vulnerabilityScore);
          
          return (
            <TableRow key={scenario.id}>
              <TableCell>{scenario.name}</TableCell>
              <TableCell>{formatCurrency(impact.originalValue)}</TableCell>
              <TableCell>{formatCurrency(impact.impactedValue)}</TableCell>
              <TableCell>
                <div className="flex items-center gap-2">
                  <span className={isPositive ? 'text-green-500' : 'text-red-500'}>
                    {isPositive ? '+' : ''}{impact.percentageChange.toFixed(2)}%
                  </span>
                  {isPositive ? (
                    <TrendingUp className="h-4 w-4 text-green-500" />
                  ) : (
                    <TrendingDown className="h-4 w-4 text-red-500" />
                  )}
                </div>
              </TableCell>
              <TableCell>{scenario.vulnerabilityScore.toFixed(1)}</TableCell>
              <TableCell>
                <div className="flex items-center gap-2">
                  <div className={`h-2 w-16 rounded-full ${colorClass}`}></div>
                  <span className="text-sm text-muted-foreground">{riskText}</span>
                </div>
              </TableCell>
              <TableCell>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => handleExpandScenario(scenario.id)}
                >
                  {expandedScenario === scenario.id ? 'Hide' : 'View'} Details
                </Button>
              </TableCell>
            </TableRow>
          );
        })}
      </TableBody>
    </Table>
  );
};
