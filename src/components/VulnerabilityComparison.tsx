
import { useState } from 'react';
import { usePortfolioStore } from '@/store/portfolioStore';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from './ui/button';
import { ComparisonPlaceholder } from './vulnerability/ComparisonPlaceholder';
import { ComparisonContent } from './vulnerability/ComparisonContent';
import { SAMPLE_VULNERABILITY_SCORES, getRiskLevel } from '@/utils/sampleVulnerabilityData';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';
import { TrendingDown, TrendingUp } from 'lucide-react';

export const VulnerabilityComparison = () => {
  const { holdingsData, scenarios, portfolioImpact, calculateImpactForScenario } = usePortfolioStore();
  const [showComparison, setShowComparison] = useState(false);
  const [expandedScenario, setExpandedScenario] = useState<string | null>(null);
  
  if (!holdingsData) {
    return null;
  }
  
  const handleToggleComparison = () => {
    setShowComparison(!showComparison);
  };
  
  const handleExpandScenario = (scenarioId: string) => {
    if (expandedScenario === scenarioId) {
      setExpandedScenario(null);
    } else {
      setExpandedScenario(scenarioId);
    }
  };
  
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      maximumFractionDigits: 0,
    }).format(value);
  };
  
  const calculateVulnerabilityScores = () => {
    // For each scenario, calculate or retrieve the vulnerability score
    return scenarios.map(scenario => {
      const impact = calculateImpactForScenario(scenario.id);
      
      return {
        id: scenario.id,
        name: scenario.name,
        impact: impact,
        vulnerabilityScore: impact?.vulnerabilityScore || 0
      };
    }).sort((a, b) => b.vulnerabilityScore - a.vulnerabilityScore); // Sort by vulnerability score (highest first)
  };
  
  const scenarioImpacts = calculateVulnerabilityScores();
  
  // Prepare comparison data for rankings
  const comparisonData: Record<string, Record<string, number>> = {};
  
  // Add sample data
  Object.entries(SAMPLE_VULNERABILITY_SCORES || {}).forEach(([individual, scores]) => {
    // Only add if it's not the current portfolio
    if (holdingsData?.individualName !== individual) {
      comparisonData[individual] = scores;
    }
  });
  
  // Add current portfolio if we have calculated impacts
  if (holdingsData) {
    comparisonData[holdingsData.individualName] = {};
    scenarioImpacts.forEach(scenario => {
      if (scenario.impact) {
        comparisonData[holdingsData.individualName][scenario.id] = scenario.vulnerabilityScore;
      }
    });
  }

  // Get all unique asset classes across all scenario impacts
  const allAssetClasses = new Set<string>();
  scenarioImpacts.forEach(scenario => {
    const impact = scenario.impact;
    if (impact?.assetClassImpacts) {
      Object.keys(impact.assetClassImpacts).forEach(assetClass => {
        allAssetClasses.add(assetClass);
      });
    }
  });
  
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>Portfolio Impact By Scenario</CardTitle>
              <CardDescription>
                Compare how each market scenario impacts {holdingsData.individualName}'s portfolio
              </CardDescription>
            </div>
            {Object.keys(comparisonData).length > 1 && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleToggleComparison}
              >
                {showComparison ? 'Hide Rankings' : 'Show Rankings'}
              </Button>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {scenarioImpacts.length === 0 ? (
              <p className="text-center py-4 text-muted-foreground">No scenario data available</p>
            ) : (
              <div className="space-y-6">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Scenario</TableHead>
                      <TableHead>Original Value</TableHead>
                      <TableHead>Projected Value</TableHead>
                      <TableHead>Net Impact</TableHead>
                      <TableHead>Vulnerability Score</TableHead>
                      <TableHead>Risk Level</TableHead>
                      <TableHead>Details</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {scenarioImpacts.map((scenario) => {
                      const impact = scenario.impact;
                      if (!impact) return null;
                      
                      const isPositive = impact.percentageChange >= 0;
                      const { text: riskText, colorClass } = getRiskLevel(scenario.vulnerabilityScore);
                      
                      return (
                        <TableRow key={scenario.id}>
                          <TableCell>{scenario.name}</TableCell>
                          <TableCell>{formatCurrency(impact.originalValue)}</TableCell>
                          <TableCell>{formatCurrency(impact.impactedValue)}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <span className={isPositive ? 'text-green-500' : 'text-red-500'}>
                                {isPositive ? '+' : ''}{impact.percentageChange.toFixed(2)}%
                              </span>
                              {isPositive ? (
                                <TrendingUp className="h-4 w-4 text-green-500" />
                              ) : (
                                <TrendingDown className="h-4 w-4 text-red-500" />
                              )}
                            </div>
                          </TableCell>
                          <TableCell>{scenario.vulnerabilityScore.toFixed(1)}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <div className={`h-2 w-16 rounded-full ${colorClass}`}></div>
                              <span className="text-sm text-muted-foreground">{riskText}</span>
                            </div>
                          </TableCell>
                          <TableCell>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              onClick={() => handleExpandScenario(scenario.id)}
                            >
                              {expandedScenario === scenario.id ? 'Hide' : 'View'} Details
                            </Button>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
                
                {/* Expanded scenario details */}
                {expandedScenario && (() => {
                  const scenario = scenarios.find(s => s.id === expandedScenario);
                  const impact = scenarioImpacts.find(s => s.id === expandedScenario)?.impact;
                  
                  if (!scenario || !impact) return null;
                  
                  return (
                    <Card className="mt-4">
                      <CardHeader>
                        <CardTitle className="text-lg">
                          {scenario.name} - Asset Class Impact
                        </CardTitle>
                        <CardDescription>{scenario.description}</CardDescription>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-3">
                          {impact.assetClassImpacts && Object.entries(impact.assetClassImpacts).map(([assetClass, impact]) => (
                            <div key={assetClass} className="flex justify-between border-b pb-2">
                              <div>
                                <div className="font-medium">{assetClass}</div>
                                <div className="text-sm text-muted-foreground">
                                  {formatCurrency(impact.originalValue)} â†’ {formatCurrency(impact.impactedValue)}
                                </div>
                              </div>
                              <div className={`font-semibold ${impact.percentageChange >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                                {impact.percentageChange >= 0 ? '+' : ''}{impact.percentageChange.toFixed(2)}%
                              </div>
                            </div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  );
                })()}

                {/* Asset Class Impact Matrix */}
                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle>Asset Class Impact Matrix</CardTitle>
                    <CardDescription>
                      Compare how different scenarios affect each asset class in {holdingsData.individualName}'s portfolio
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Asset Class</TableHead>
                          {scenarioImpacts.map(scenario => (
                            <TableHead key={scenario.id}>{scenario.name}</TableHead>
                          ))}
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {Array.from(allAssetClasses).map(assetClass => (
                          <TableRow key={assetClass}>
                            <TableCell className="font-medium">{assetClass}</TableCell>
                            {scenarioImpacts.map(scenario => {
                              const impact = scenario.impact?.assetClassImpacts?.[assetClass];
                              if (!impact) return <TableCell key={scenario.id}>â€”</TableCell>;
                              
                              const isPositive = impact.percentageChange >= 0;
                              
                              return (
                                <TableCell key={scenario.id}>
                                  <div className="text-sm">
                                    <div>{formatCurrency(impact.originalValue)} â†’</div>
                                    <div>{formatCurrency(impact.impactedValue)}</div>
                                    <div className={isPositive ? 'text-green-500' : 'text-red-500'}>
                                      {isPositive ? '+' : ''}{impact.percentageChange.toFixed(2)}%
                                    </div>
                                  </div>
                                </TableCell>
                              );
                            })}
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>
              </div>
            )}
            
            {showComparison && (
              <div className="mt-8">
                <h3 className="text-lg font-medium mb-4">Vulnerability Rankings Comparison</h3>
                <ComparisonContent 
                  sortedData={comparisonData} 
                  currentPortfolio={holdingsData.individualName} 
                  multiScenario={true}
                />
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
