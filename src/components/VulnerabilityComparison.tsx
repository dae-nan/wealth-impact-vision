
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ScenarioImpactTable } from './vulnerability/ScenarioImpactTable';
import { ScenarioDetailCard } from './vulnerability/ScenarioDetailCard';
import { AssetClassMatrixTable } from './vulnerability/AssetClassMatrixTable';
import { WaterfallChart } from './vulnerability/WaterfallChart';
import { useVulnerabilityComparison } from '@/hooks/useVulnerabilityComparison';

export const VulnerabilityComparison = () => {
  const {
    holdingsData,
    scenarios,
    expandedScenario,
    handleExpandScenario,
    calculateVulnerabilityScores,
    getAllAssetClasses
  } = useVulnerabilityComparison();
  
  if (!holdingsData) {
    return null;
  }
  
  const scenarioImpacts = calculateVulnerabilityScores();
  const allAssetClasses = getAllAssetClasses();
  
  const expandedScenarioData = expandedScenario 
    ? scenarios.find(s => s.id === expandedScenario)
    : null;
  
  const expandedImpact = expandedScenario
    ? scenarioImpacts.find(s => s.id === expandedScenario)?.impact
    : null;
  
  return (
    <div className="space-y-8">
      {/* Portfolio Impact By Scenario Section */}
      <Card>
        <CardHeader>
          <CardTitle>Portfolio Impact By Scenario</CardTitle>
          <CardDescription>
            Compare how each market scenario impacts {holdingsData.individualName}'s portfolio
          </CardDescription>
        </CardHeader>
        <CardContent>
          <ScenarioImpactTable
            scenarioImpacts={scenarioImpacts}
            expandedScenario={expandedScenario}
            handleExpandScenario={handleExpandScenario}
          />
          
          {/* Display waterfall chart when a scenario is expanded */}
          {expandedScenario && expandedImpact && expandedScenarioData && (
            <WaterfallChart 
              impact={expandedImpact} 
              scenarioName={expandedScenarioData.name} 
            />
          )}
          
          {/* Original detailed view - can be hidden or kept as an alternative view */}
          {false && expandedScenario && (() => {
            const scenario = scenarios.find(s => s.id === expandedScenario);
            const impact = scenarioImpacts.find(s => s.id === expandedScenario)?.impact;
            
            return (
              <ScenarioDetailCard scenario={scenario} impact={impact} />
            );
          })()}
        </CardContent>
      </Card>
      
      {/* Asset Class Impact Matrix - Now in a separate card */}
      <Card>
        <CardHeader>
          <CardTitle>Asset Class Impact Matrix</CardTitle>
          <CardDescription>
            Compare how different scenarios affect each asset class in {holdingsData.individualName}'s portfolio
          </CardDescription>
        </CardHeader>
        <CardContent>
          <AssetClassMatrixTable 
            scenarioImpacts={scenarioImpacts}
            allAssetClasses={allAssetClasses}
            individualName={holdingsData.individualName}
          />
        </CardContent>
      </Card>
    </div>
  );
};
