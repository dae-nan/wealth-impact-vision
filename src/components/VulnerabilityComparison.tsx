
import { useState } from 'react';
import { usePortfolioStore } from '@/store/portfolioStore';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from './ui/button';
import { ComparisonPlaceholder } from './vulnerability/ComparisonPlaceholder';
import { ComparisonContent } from './vulnerability/ComparisonContent';
import { SAMPLE_VULNERABILITY_SCORES } from '@/utils/sampleVulnerabilityData';

export const VulnerabilityComparison = () => {
  const { portfolioImpact, scenarios, selectedScenarioId, holdingsData } = usePortfolioStore();
  const [showComparison, setShowComparison] = useState(false);
  
  if (!selectedScenarioId) {
    return null;
  }
  
  const selectedScenario = scenarios.find(s => s.id === selectedScenarioId);
  
  if (!selectedScenario) {
    return null;
  }
  
  const handleToggleComparison = () => {
    setShowComparison(!showComparison);
  };
  
  // Prepare comparison data
  const comparisonData: Record<string, number> = {};
  
  // Add current portfolio if we have calculated impact
  if (portfolioImpact && holdingsData) {
    comparisonData[holdingsData.individualName] = portfolioImpact.vulnerabilityScore;
  }
  
  // Add sample data
  Object.entries(SAMPLE_VULNERABILITY_SCORES).forEach(([individual, scores]) => {
    // Only add if it's not the current portfolio
    if (holdingsData?.individualName !== individual) {
      comparisonData[individual] = scores[selectedScenarioId] || 0;
    }
  });
  
  // Sort the data by vulnerability score (descending)
  const sortedData: Record<string, number> = {};
  Object.entries(comparisonData)
    .sort((a, b) => b[1] - a[1])
    .forEach(([key, value]) => {
      sortedData[key] = value;
    });
  
  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <div>
            <CardTitle>Vulnerability Comparison</CardTitle>
            <CardDescription>
              Compare portfolio vulnerability in {selectedScenario.name} scenario
            </CardDescription>
          </div>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleToggleComparison}
          >
            {showComparison ? 'Hide Comparison' : 'Show Comparison'}
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {!showComparison ? (
          <ComparisonPlaceholder hasHoldings={!!holdingsData} />
        ) : (
          <ComparisonContent 
            sortedData={sortedData} 
            currentPortfolio={holdingsData?.individualName} 
          />
        )}
      </CardContent>
    </Card>
  );
};
