
import { useState } from 'react';
import { usePortfolioStore } from '@/store/portfolioStore';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart } from './visualizations/BarChart';
import { Button } from './ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { SampleDataButton } from './SampleDataButton';

// Sample vulnerability scores for demo purposes
// In a real implementation, these would be calculated dynamically
const SAMPLE_VULNERABILITY_SCORES = {
  'Warren Buffett': {
    'gfc-crisis': 28.5,
    'trump-put': 12.3,
    'tech-bubble': 18.7,
    'stagflation': 22.1,
    'energy-shock': 15.9
  },
  'Li Ka Shing': {
    'gfc-crisis': 31.2,
    'trump-put': 14.8,
    'tech-bubble': 26.3,
    'stagflation': 18.9,
    'energy-shock': 21.7
  },
  'Bill Gates': {
    'gfc-crisis': 25.7,
    'trump-put': 10.2,
    'tech-bubble': 32.6,
    'stagflation': 17.3,
    'energy-shock': 14.1
  },
  'Elon Musk': {
    'gfc-crisis': 42.1,
    'trump-put': 18.5,
    'tech-bubble': 47.9,
    'stagflation': 26.8,
    'energy-shock': 23.4
  }
};

export const VulnerabilityComparison = () => {
  const { portfolioImpact, scenarios, selectedScenarioId, holdingsData } = usePortfolioStore();
  const [showComparison, setShowComparison] = useState(false);
  
  if (!selectedScenarioId) {
    return null;
  }
  
  const selectedScenario = scenarios.find(s => s.id === selectedScenarioId);
  
  if (!selectedScenario) {
    return null;
  }
  
  const handleToggleComparison = () => {
    setShowComparison(!showComparison);
  };
  
  // Prepare comparison data
  const comparisonData: Record<string, number> = {};
  
  // Add current portfolio if we have calculated impact
  if (portfolioImpact && holdingsData) {
    comparisonData[holdingsData.individualName] = portfolioImpact.vulnerabilityScore;
  }
  
  // Add sample data
  Object.entries(SAMPLE_VULNERABILITY_SCORES).forEach(([individual, scores]) => {
    // Only add if it's not the current portfolio
    if (holdingsData?.individualName !== individual) {
      comparisonData[individual] = scores[selectedScenarioId] || 0;
    }
  });
  
  // Sort the data by vulnerability score (descending)
  const sortedData: Record<string, number> = {};
  Object.entries(comparisonData)
    .sort((a, b) => b[1] - a[1])
    .forEach(([key, value]) => {
      sortedData[key] = value;
    });
  
  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-center">
          <div>
            <CardTitle>Vulnerability Comparison</CardTitle>
            <CardDescription>
              Compare portfolio vulnerability in {selectedScenario.name} scenario
            </CardDescription>
          </div>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleToggleComparison}
          >
            {showComparison ? 'Hide Comparison' : 'Show Comparison'}
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {!showComparison ? (
          <div className="flex flex-col items-center justify-center py-6 space-y-4">
            <p className="text-center max-w-md text-muted-foreground">
              Compare your portfolio vulnerability against Warren Buffett, Li Ka Shing, Bill Gates, and Elon Musk.
            </p>
            {!holdingsData && (
              <div className="space-y-4">
                <p className="text-center text-sm font-medium">
                  Upload or select a sample portfolio to start
                </p>
                <SampleDataButton />
              </div>
            )}
          </div>
        ) : (
          <Tabs defaultValue="table">
            <TabsList className="mb-4">
              <TabsTrigger value="table">Table</TabsTrigger>
              <TabsTrigger value="chart">Chart</TabsTrigger>
            </TabsList>
            
            <TabsContent value="table" className="space-y-4">
              <div className="border rounded-lg overflow-hidden">
                <table className="w-full">
                  <thead className="bg-muted text-sm">
                    <tr>
                      <th className="py-2 px-4 text-left">Individual</th>
                      <th className="py-2 px-4 text-left">Vulnerability Score</th>
                      <th className="py-2 px-4 text-left">Risk Level</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(sortedData).map(([individual, score]) => (
                      <tr key={individual} className="border-t">
                        <td className="py-2 px-4 font-medium">
                          {individual}
                          {holdingsData?.individualName === individual && 
                            <span className="ml-2 text-xs bg-primary/10 text-primary px-2 py-0.5 rounded-full">
                              Current
                            </span>
                          }
                        </td>
                        <td className="py-2 px-4">
                          {score.toFixed(1)}
                        </td>
                        <td className="py-2 px-4">
                          <div className="flex items-center">
                            <div 
                              className={`h-2 rounded-full w-24 ${
                                score > 30 ? 'bg-red-500' : 
                                score > 20 ? 'bg-amber-500' : 
                                score > 10 ? 'bg-yellow-500' : 
                                'bg-green-500'
                              }`}
                            >
                              <div 
                                className="h-full rounded-full bg-muted" 
                                style={{ width: `${100 - Math.min(score / 0.5, 100)}%` }}
                              />
                            </div>
                            <span className="ml-2 text-sm text-muted-foreground">
                              {score > 30 ? 'High' : 
                               score > 20 ? 'Medium' : 
                               score > 10 ? 'Low' : 
                               'Very Low'}
                            </span>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              <p className="text-xs text-muted-foreground italic">
                Vulnerability score is calculated based on portfolio volatility and downside exposure.
                Higher scores indicate greater vulnerability to the selected scenario.
              </p>
            </TabsContent>
            
            <TabsContent value="chart">
              <BarChart 
                data={sortedData} 
                title="Vulnerability Score Comparison" 
                height={300}
              />
              <p className="text-xs text-muted-foreground italic mt-2">
                Vulnerability score is calculated based on portfolio volatility and downside exposure.
                Higher scores indicate greater vulnerability to the selected scenario.
              </p>
            </TabsContent>
          </Tabs>
        )}
      </CardContent>
    </Card>
  );
};
